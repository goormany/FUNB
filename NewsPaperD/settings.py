"""
Django settings for NewsPaperD project.

Generated by 'django-admin startproject' using Django 3.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import os
from pathlib import Path
import locale


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '2cjdb0(&vjqg9cwo13o7(dg5cxlu2=gin1&cppeeq$u6&w5^u='

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'modeltranslation',

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django_filters',

    'news.apps.NewsConfig',
    'accounts',

    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    # ... include the providers you want to enable:
    'allauth.socialaccount.providers.google',

]

SITE_ID = 1

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    'accounts.middlewares.TimezoneMiddleware',

]

ROOT_URLCONF = 'NewsPaperD.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates', BASE_DIR / 'accounts' / 'templates' / 'allauth',
                 BASE_DIR / 'templates' / 'admin', ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.request',
            ],
        },
    },
]

WSGI_APPLICATION = 'NewsPaperD.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': 'postgres',
#         'USER': 'postgres',
#         'PASSWORD': 'secret',
#         'HOST': 'localhost',
#         'PORT': '5432',
#     },
# }

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

CSRF_COOKIE_SECURE = True

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/


LANGUAGE_CODE = 'ru-ru'
TIME_ZONE = 'Asia/Almaty'
USE_I18N = True
USE_L10N = True
USE_TZ = True

MODELTRANSLATION_DEBUG = False

LOCALE_PATH = [
    os.path.join(BASE_DIR, 'locale')
]

LANGUAGES = [
    ('en', 'English'),
    ('ru', 'Русский'),
]

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]
STATIC_URL = '/static/'

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')

LOGIN_URL = 'accounts/login/'
LOGIN_REDIRECT_URL = '/news/'

ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
# Отправляем письмо после регистрации
ACCOUNT_EMAIL_VERIFICATION = 'optional'
SOCIALACCOUNT_EMAIL_VERIFICATION = ACCOUNT_EMAIL_VERIFICATION
# Переход по ссылке сразу активирует пользователя
ACCOUNT_CONFIRM_EMAIL_ON_GET = True
# Указываем файл, где храниться функция переопределения редиректов allauth
ACCOUNT_ADAPTER = 'accounts.adapter.MyAccountAdapter'
# Указываем файл, где храниться функция переопределения формы регистрации allauth через соц сети
SOCIALACCOUNT_ADAPTER = 'accounts.adapter.SocialAccountAdapter'
# Указываем файл, где храниться функция переопределения формы регистрации allauth
ACCOUNT_FORMS = {'signup': 'accounts.forms.BasicSignupForm'}
# Переопределяем базавой учетную запись на свою
AUTH_USER_MODEL = 'accounts.User'

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'  # адрес сервера Яндекс-почты для всех один и тот же
EMAIL_PORT = 587  # порт smtp сервера тоже одинаковый
EMAIL_HOST_USER = 'testdjango2021@gmail.com'  # ваше имя пользователя
EMAIL_HOST_PASSWORD = 'django2021&'  # пароль от почты
EMAIL_USE_TLS = True
ADMINS = [('Dos', 'dos@mail.ru')]
SERVER_EMAIL = 'testdjango2021@gmail.com'
DEFAULT_FROM_EMAIL = 'testdjango2021@gmail.com'  # Используется для отправки email после регистрации
EMAIL_SUBJECT_PREFIX = '[NewsPaper] '

# Настройки celery
CELERY_BROKER_URL = 'redis://localhost:6379'  # казывает на URL брокера сообщений (Redis)
CELERY_RESULT_BACKEND = 'redis://localhost:6379'  # указывает на хранилище результатов выполнения задач.
CELERY_ACCEPT_CONTENT = ['application/json']  # допустимый формат данных.
CELERY_TASK_SERIALIZER = 'json'  # метод сериализации задач.
CELERY_RESULT_SERIALIZER = 'json'  # метод сериализации результатов.
CELERY_ENABLE_UTC = False  # селери принимает часовой пояс джанго

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': os.path.join(BASE_DIR, 'cache_files'),
    }
}

# Блок логирования
LOGGING = \
    {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'debug_format': {
                'format': '{asctime} {levelname} {message}',
                'style': '{',
            },
            'warning_format': {
                'format': '{asctime} {levelname} {message} {pathname}',
                'style': '{',
            },
            'error_format': {
                'format': '{asctime} {levelname} {message} {pathname} {exc_info}',
                'style': '{',
            },
            'general_format': {
                'format': '{asctime} {levelname} {message} {module}',
                'style': '{',
            },
        },

        'filters': {
            'require_debug_true': {
                '()': 'django.utils.log.RequireDebugTrue',
            },
            'require_debug_false': {
                '()': 'django.utils.log.RequireDebugFalse',
            },
        },

        'handlers': {
            'console_debug': {
                'level': 'DEBUG',
                'class': 'logging.StreamHandler',
                'formatter': 'debug_format',
                'filters': ['require_debug_true'],
            },
            'console_warning': {
                'level': 'WARNING',
                'class': 'logging.StreamHandler',
                'formatter': 'warning_format',
                'filters': ['require_debug_true'],
            },
            'console_error': {
                'level': 'ERROR',
                'class': 'logging.StreamHandler',
                'formatter': 'error_format',
                'filters': ['require_debug_true'],
            },
            'console_critical': {
                'level': 'ERROR',
                'class': 'logging.StreamHandler',
                'formatter': 'error_format',
                'filters': ['require_debug_true'],
            },
            'general': {
                'level': 'INFO',
                'class': 'logging.FileHandler',
                'filename': 'general.log',
                'formatter': 'general_format',
                'filters': ['require_debug_false'],
            },
            'errors': {
                'level': 'WARNING',
                'class': 'logging.FileHandler',
                'filename': 'errors.log',
                'formatter': 'general_format',
                'filters': ['require_debug_false'],

            },
            'security': {
                'class': 'logging.FileHandler',
                'filename': 'security.log',
                'formatter': 'general_format',
            },
            'mail_admins': {
                'level': 'ERROR',
                'filters': ['require_debug_false'],
                'class': 'django.utils.log.AdminEmailHandler',
                'formatter': 'general_format',
                'include_html': True,
            }

        },

        'loggers': {
            'django': {
                'handlers': ['console_debug', 'console_warning', 'console_error', 'console_critical', ],
                'propagate': True,
                'level': 'DEBUG',
            },
            'django.request': {
                'handlers': ['errors', 'mail_admins'],
                'propagate': True,
                'level': 'DEBUG',
            },
            'django.server': {
                'handlers': ['errors', 'mail_admins'],
                'propagate': True,
                'level': 'DEBUG',
            },
            'django.template': {
                'handlers': ['errors'],
                'propagate': True,
                'level': 'DEBUG',
            },
            'django.db_backends': {
                'handlers': ['errors'],
                'propagate': True,
                'level': 'DEBUG',
            },
            'django.security': {
                'handlers': ['security', ],
                'propagate': True,
                'level': 'DEBUG',
            },
        }
    }
